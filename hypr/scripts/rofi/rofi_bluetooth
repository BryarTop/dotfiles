#!/usr/bin/env bash

DIR="$HOME/.config/hypr/"
RASI="$DIR/scripts/rofi/bluetooth.rasi"

# cosntants
divider="---------"
goback="Back"

# checks if power is on
power_on() {
	if bluetoothctl show | grep -q "Powered: yes"; then
		return 0
	else
		return 1
	fi
}

# toggle power
toggle_power() {
	if power_on; then 
		bluetoothctl power off
		show_menu
	else
		if rfkill list bluetooth | grep -q 'blocked: yes'; then
			rfkill unblock bluetooth && sleep 3
		fi
		bluetoothctl power on 
		show_menu
	fi
}

# checks if controller is scanning for new devices
scan_on() {
	if bluetoothctl show | grep -q "Discovering: yes"; then
		echo "Scan: on"
		return 0
	else
		echo "Scan: off"
		return 1
	fi
}

toggle_scan() {
	if scan_on; then 
		kill $(pgrep -f "bluetoothctl scan on")
		show_menu
	else 
		bluetoothctl scan on &
		echo "Scanning..."
		sleep 5
		show_menu
	fi
}

#checks if controller is able to pair to devices
pairable_on() {
	if bluetoothctl show | grep -q "Pairable: yes"; then
		echo "Pairable: on"
		return 0
	else
		echo "Pairable: off"
		return 1
	fi
}

# Toggles pairable state
toggle_pairable() {
	if pairable_on; then
		bluetoothctl pairable off
		show_menu
	else
		bluetoothctl pairable on
		show_menu
	fi
}

# checks if controller is discoverable by other devices
discoverable_on() {
	if bluetoothctl show | grep -q "Discoverable: yes"; then
		echo "Discoverable: on"
		return 0
	else
		echo "Discoverable: off"
		return 1
	fi
}

# Toggles discoverable state
toggle_discoverable() {
	if discoverable_on; then
		bluetoothctl discoverable off
		show_menu
	else
		bluetoothctl discoverable on
		show_menu
	fi
}

# Checks if a device is connectedS
device_connected() {
	device_info=$(bluetoothctl info "$1")
	if echo"$device_info" | grep -q "Connected: yes"; then
		return 0
	else 
		return 1
	fi
}

# toggle device connection
toggle_connection() {
	if device_connected $1; then
		bluetoothctl disconnect $1
		device_menu "$device"
	else
		bluetoothctl connect $1
		device_menu "$device"
	fi
}

# checks if device is paired
device_paired() {
	device_info=$(bluetoothctl info "$1")
	if echo "$device_info" | grep -q "Paired: yes"; then
		echo "Paired: yes"
		return 0
	else
		echo "Paired: no"
		return 1
	fi
}

# Toggles device paired state
toggle_paired() {
	if device_paired "$1"; then 
		bluetoothctl remove "$1"
		device_menu "$device"
	else
		bluetoothctl pair "$1"
		device_menu "$device"
	fi
}

# check if a device is trusted
device_trusted() {
	device_info=$(bluetoothctl info "$1")
	if echo "$device_info" | grep -q "Trusted: yes"; then
		echo "Trusted: yes"
		return 0
	else
		echo "Trusted: no"
		return 1
	fi
}

# toggle device trust
toggle_trust() {
	if device_trusted "$1"; then
		bluetoothctl untrust "$1"
		device_menu "$device"
	else
		bluetoothctl trust "$1"
		device_menu "$device"
	fi
}

# prints a shor string with the current bluetooth status
# useful for status bars like polybar
print_status() {
	if power_on; then
		printf ""

		paired_devices_cmd="devices Paired"
		# chekc if an outdate version of bluetoothctl is used to preserve backwards compatibility
		if (( $(echo "$(bluetoothctl version | cut -d ' ' -f 2) >= 5.65" | bc -l) )); then 
			paired_devices_cmd="paired-devices"
		fi

		mapfile -t paired_devices < <(bluetoothctl $paired_devices_cmd | grep Device | cut -d ' ' -f 2-)
		counter=0

		for device in "${paired_devices[@]}"; do
			if device_connected $device; then
				device_alias=$(bluetoothctl info "$device" | grep "Alias" | cut -d ' ' -f 2-)
				if [ $counter -gt 0 ]; then
					printf ", %s" "$device_alias"
				else
					printf ", %s" "$device_alias"
				fi

				((counter++))
			fi
		done
		printf "\n"
	else
		echo ""
	fi
}

device_menu() {
	device=$1

	#get device name and mac address
	device_name=$(echo $device | cut -d ' ' -f 3-)
	mac=$(echo "$device" | cut -d ' ' -f 2)

	# build options
	if device_connected $mac; then
		connected="Connected: yes"
	else
		connected="Connected: no"
	fi
	paired=$(device_paired $mac)
	trusted=$(device_trusted $mac)
	options="$connected\n$paired\n$trusted\n$divider\n$goback\Exit"

	# Open Rofi menu read chosen option
	case "$chosen" in 
		"" | "$divider")
			echo "No option chosen."
			;;
		"$connected")
			toggle_connection "$mac"
			;;
		"$paired")
			toggle_paired "$mac"
			;;
		"$trusted")
			toggle_trust "$mac"
			;;
		"$goback")
			show_menu
			;;
	esac
}

# Open rofi menu with current bluetooth status and options to connect
show_menu() {
	# get menu options
	if power_on; then
		power="Power: on"

		# Human-readable names for deviced, one per line
		# if scan is off, will only list paired devices
		devices=$(bluetoothctl devices | grep Device | cut -d ' ' -f 3-)

		# get controller flags
		scan=$scan_on
		pairable=$(pairable_on)
		discoverable=$(discoverable_on)

		# Options passed to rofi
		chosen="$(echo -e "$options" | $rofi_command "Bluetooth")"
	else
		power="Power: off"
		options="$power\nExit"
	fi

		# Match chosen to options to command
		case $chosen in 
			"" | "$divider")
				echo "No option chosen."
				;;
			"$power")
				toggle_power
				;;
			"$scan")
				toggle_scan
				;;
			"$discoverable")
				toggle_discoverable
				;;
			"$pairable")
				toggle_pairable
				;;
			*)
				device=$(bluetoothctl devices | grep "$chosen")
				;;
		esac
}


rofi_command="rofi -theme "${RASI}" -dmenu $* -p"

case "$1" in 
	--status)
		print_status
		;;
	*)
		show_menu
		;;
esac

